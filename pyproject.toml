[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "python-basics-pydantic"
version = "1.0.0"
description = "Python fundamentals with Pydantic for Databricks and Streamlit development"
readme = "README.md"
authors = [
    {name = "Python Basics Tutorial", email = "contact@example.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Education",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Education",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
keywords = ["python", "pydantic", "databricks", "streamlit", "data-validation", "tutorial"]
requires-python = ">=3.8"
dependencies = [
    "pydantic>=2.0.0",
    "pandas>=1.5.0",
    "numpy>=1.21.0",
    "streamlit>=1.25.0",
    "plotly>=5.0.0",
    "scikit-learn>=1.0.0",
    "python-dateutil>=2.8.0",
    "email-validator>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "jupyterlab>=3.0.0",
    "notebook>=6.0.0",
    "ipywidgets>=7.6.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=8.0.0",
]
viz = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
]

[project.urls]
Homepage = "https://github.com/merca/python_basics_pydantic"
Documentation = "https://github.com/merca/python_basics_pydantic/blob/main/README.md"
Repository = "https://github.com/merca/python_basics_pydantic"
Issues = "https://github.com/merca/python_basics_pydantic/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["python_basics_pydantic*"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yml", "*.yaml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["python_basics_pydantic"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]